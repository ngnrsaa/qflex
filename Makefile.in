TARGETS = qflex

CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
PREFIX = @prefix@
PYBIND11 = @pybind11@
PYTHON_TESTS = @python_tests@
OPENMP = @openmp@
USEMKL = @usemkl@
ERROR_ON_WARNINGS = @error_on_warnings@

ifeq ($(ERROR_ON_WARNINGS), true)
  CXXFLAGS += -Werror
endif

ifeq ($(USEMKL), true)
  ifeq ($(CXX), icpc)
	CXXFLAGS += -mkl=parallel -DMKL_TENSOR
  else
	CXXFLAGS += -m64 -I${MKLROOT}/include -DMKL_TENSOR
        LIBS := -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_gnu_thread -lmkl_core -lgomp -lpthread -lm -ldl $(LIBS)
  endif
else
  LIBS := -lopenblas $(LIBS)
endif

ifeq ($(OPENMP), true)
  ifeq ($(CXX), icpc)
  	CXXFLAGS += -qopenmp
  else
    CXXFLAGS += -fopenmp
  endif
else
  CXXFLAGS += -Wno-unknown-pragmas
endif

ifeq ($(PYBIND11), true)
  TARGETS += pybind
endif

OBJS = ordering.o grid.o circuit.o evaluate_circuit.o tensor.o contraction_utils.o \
    stopwatch.o read_circuit.o utils.o 

MODULES = docopt
TESTS_MODULES = googletest

export CXX
export CXXFLAGS
export CPPFLAGS
export LDFLAGS
export LIBS
export FLAGS
export OBJS

.PHONY: all
all: $(TARGETS)

.PHONY: docopt
docopt:
	-git submodule update --init --recursive src/docopt

.PHONY: googletest
googletest:
	-git submodule update --init --recursive tests/src/googletest

.PHONY: qflex
qflex: $(MODULES)
	$(MAKE) -C src/

.PHONY: pybind
pybind: qflex
	$(MAKE) -C src/ pybind

.PHONY: tests
tests: $(TESTS_MODULES)
	$(MAKE) -C tests/src/

.PHONY: run-py-tests
run-py-tests: pybind
	$(MAKE) -C tests/python/ run-all

.PHONY: run-cxx-tests
run-cxx-tests: tests
	$(MAKE) -C tests/src/ run-all

TESTS = run-cxx-tests
ifeq ($(PYTHON_TESTS), true)
  TESTS += run-py-tests
endif

.PHONY: run-tests
run-tests: $(TESTS)

.PHONY: install
install:
	@find config -type f -exec install -vD {} $(PREFIX)/share/qflex/{} \;
	@find docs -type f -exec install -vD {} $(PREFIX)/share/qflex/{} \;
	@install -vD src/qflex.x $(PREFIX)/bin/qflex
	@find python -type f -iname "*.so" -exec install -vD {} $(PREFIX)/lib/qflex/{} \;

.PHONY: clean
clean:
	-$(MAKE) -C src/ clean
	-$(MAKE) -C tests/src/ clean

.PHONY: clean-all
clean-all: clean
	-git submodule deinit --all
	-bash scripts/clean_git.sh -y
